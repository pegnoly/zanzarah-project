type ActiveConfirmationInfo {
  activatedAt: DateTime!
}

type BookModel {
  id: ID!
  name: String!
  directory: String!
  initialized: Boolean!
  available: Boolean!
  majorVersion: Int!
  minorVersion: Int!
  patchVersion: Int!
}

type ConfirmationCodeInfo {
  value: String!
  exprirationTime: DateTime!
}

union ConfirmationState = ConfirmationCodeInfo | ActiveConfirmationInfo

"""
Implement the DateTime<Local> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type ElementModel {
  id: ID!
  bookId: ID!
  name: String!
  element: WizformElementType!
  enabled: Boolean!
}

type EmailConfirmationResponse {
  message: String!
}

type InsertWizformsResponse {
  message: String!
}

type Magic {
  level: Int!
  firstActiveSlot: MagicSlotModel!
  firstPassiveSlot: MagicSlotModel!
  secondActiveSlot: MagicSlotModel!
  secondPassiveSlot: MagicSlotModel!
}

enum MagicElementType {
  NONE
  NATURE
  AIR
  WATER
  LIGHT
  ENERGY
  PSI
  STONE
  ICE
  FIRE
  DARK
  CHAOS
  METALL
  JOKER
  ERROR
}

input MagicInputModel {
  level: Int!
  firstActiveSlot: MagicSlotInputModel!
  firstPassiveSlot: MagicSlotInputModel!
  secondActiveSlot: MagicSlotInputModel!
  secondPassiveSlot: MagicSlotInputModel!
}

input MagicSlotInputModel {
  firstElement: MagicElementType!
  secondElement: MagicElementType!
  thirdElement: MagicElementType!
}

type MagicSlotModel {
  firstElement: MagicElementType!
  secondElement: MagicElementType!
  thirdElement: MagicElementType!
}

type Magics {
  types: [Magic!]!
}

input MagicsInputModel {
  types: [MagicInputModel!]!
}

type Model {
  id: ID!
  name: String!
  email: String!
  password: String!
  confirmationState: ConfirmationState!
  permissions: Permissions!
}

type Mutation {
  insertWizformsBulk(wizforms: [WizformInputModel!]!): InsertWizformsResponse!
  tryRegisterUser(email: String!, password: String!): RegisterUserResponse!
  confirmEmail(email: String!, code: String!): EmailConfirmationResponse!
}

enum PermissionType {
  UNCONFIRMED_USER
  CONFIRMED_USER
  MOD_ADMIN
  SUPER_ADMIN
}

type Permissions {
  types: [PermissionType!]!
}

type Query {
  userByEmail(email: String!): Model
  wizforms(
    """
    Book this wizform belongs to
    """
    bookId: ID!
    """
    Select all or only enabled wizforms
    """
    enabled: Boolean
    """
    Optional element of wizform
    """
    elementFilter: WizformElementType
    """
    Optional name filter
    """
    nameFilter: String
  ): [WizformModel!]!
  wizform(
    """
    Id of wizform to focus
    """
    id: ID!
  ): WizformModel
  elements(
    """
    Book this element belongs to
    """
    bookId: ID!
    """
    Select all or only enabled elements
    """
    enabled: Boolean
  ): [ElementModel!]!
  books(
    """
    Query only available for user books
    """
    available: Boolean
  ): [BookModel!]!
}

type RegisterUserResponse {
  message: String!
}

enum WizformElementType {
  NONE
  NEUTRAL_ONE
  NATURE
  AIR
  WATER
  LIGHT
  ENERGY
  PSI
  STONE
  ICE
  FIRE
  DARK
  CHAOS
  METALL
  NEUTRAL_TWO
  CUSTOM_1
  CUSTOM_2
  CUSTOM_3
  CUSTOM_4
  CUSTOM_5
}

input WizformInputModel {
  id: ID!
  bookId: ID!
  gameId: String!
  element: WizformElementType!
  magics: MagicsInputModel!
  number: Int!
  hitpoints: Int!
  agility: Int!
  jumpAbility: Int!
  precision: Int!
  evolutionForm: Int!
  evolutionName: String
  previousForm: Int
  previousFormName: String
  evolutionLevel: Int!
  expModifier: Int!
  enabled: Boolean!
  description: String!
  icon64: String!
  name: String!
}

type WizformModel {
  id: ID!
  bookId: ID!
  gameId: String!
  element: WizformElementType!
  magics: Magics!
  number: Int!
  hitpoints: Int!
  agility: Int!
  jumpAbility: Int!
  precision: Int!
  evolutionForm: Int!
  evolutionName: String
  previousForm: Int
  previousFormName: String
  evolutionLevel: Int!
  expModifier: Int!
  enabled: Boolean!
  description: String!
  icon64: String!
  name: String!
}

