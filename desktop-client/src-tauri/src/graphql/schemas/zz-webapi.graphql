schema {
  query: QueryRoot
  mutation: MutationRoot
}
type AddCollectionItemResponse {
  createdId: ID!
}

type AuthorizationResult {
  userId: ID!
  registrationState: RegistrationState!
  permission: UserPermissionType!
}

type BookFullModel {
  id: ID!
  name: String!
  version: String!
  compatibleWith: CompatibleVersions!
  wizformsCount: Int!
  activeWizformsCount: Int!
}

type BookModel {
  id: ID!
  name: String!
  directory: String!
  initialized: Boolean!
  available: Boolean!
  version: String!
  compatibleWith: CompatibleVersions!
}

type CollectionFullModel {
  id: ID!
  bookId: ID!
  userId: ID!
  createdOnVersion: String!
  name: String!
  active: Boolean!
  entriesCount: Int!
}

type CollectionModel {
  id: ID!
  bookId: ID!
  userId: ID!
  createdOnVersion: String!
  name: String!
  active: Boolean!
}

type CollectionWizform {
  id: ID!
  bookId: ID!
  gameId: String!
  element: WizformElementType!
  magics: Magics!
  number: Int!
  hitpoints: Int!
  agility: Int!
  jumpAbility: Int!
  precision: Int!
  evolutionForm: Int!
  evolutionName: String
  previousForm: Int
  previousFormName: String
  evolutionLevel: Int!
  expModifier: Int!
  enabled: Boolean!
  description: String!
  icon64: String!
  name: String!
  inCollectionId: UUID
}

type CompatibleVersions {
  versions: [String!]!
}

type ElementModel {
  id: ID!
  bookId: ID!
  name: String!
  element: WizformElementType!
  enabled: Boolean!
}

type EmailConfirmationResult {
  newToken: String!
  registrationState: RegistrationState!
  permission: UserPermissionType!
}

type InsertWizformsResponse {
  message: String!
}

type LocationNameModel {
  locationName: String!
  sectionName: String!
  comment: String
}

type LocationSectionWithCount {
  id: ID!
  name: String!
  locationsCount: Int!
}

type LocationWithEntriesCountModel {
  id: ID!
  name: String!
  entriesCount: Int!
}

type LocationWizformFullEntry {
  id: ID!
  wizformName: String!
  wizformNumber: Int!
  wizformElement: WizformElementType!
  comment: String
  icon: String!
}

type Magic {
  level: Int!
  firstActiveSlot: MagicSlotModel!
  firstPassiveSlot: MagicSlotModel!
  secondActiveSlot: MagicSlotModel!
  secondPassiveSlot: MagicSlotModel!
}

enum MagicElementType {
  NONE
  NATURE
  AIR
  WATER
  LIGHT
  ENERGY
  PSI
  STONE
  ICE
  FIRE
  DARK
  CHAOS
  METALL
  JOKER
  ERROR
}

input MagicInputModel {
  level: Int!
  firstActiveSlot: MagicSlotInputModel!
  firstPassiveSlot: MagicSlotInputModel!
  secondActiveSlot: MagicSlotInputModel!
  secondPassiveSlot: MagicSlotInputModel!
}

input MagicSlotInputModel {
  firstElement: MagicElementType!
  secondElement: MagicElementType!
  thirdElement: MagicElementType!
}

type MagicSlotModel {
  firstElement: MagicElementType!
  secondElement: MagicElementType!
  thirdElement: MagicElementType!
}

type Magics {
  types: [Magic!]!
}

input MagicsInputModel {
  types: [MagicInputModel!]!
}

type MutationRoot {
  createBook(name: String!, directory: String!, version: String!): BookModel!
  insertWizformsBulk(wizforms: [WizformInputModel!]!): InsertWizformsResponse!
  tryRegisterUser(email: String!, password: String!): RegistrationResult!
  updateWizform(updateModel: WizformUpdateModel!): UpdateWizformResponse!
  renewToken(email: String!, password: String!): TokenUpdateResult!
  confirmEmail(email: String!, code: String!): EmailConfirmationResult!
  createCollection(userId: ID!, bookId: ID!, name: String!): CollectionModel!
  setActiveCollection(collectionId: ID!): String!
  addCollectionItem(collectionId: ID!, wizformId: ID!): AddCollectionItemResponse!
  removeCollectionItem(id: ID!): String!
  addLocationWizform(locationId: ID!, wizformId: ID!, comment: String): ID!
  removeLocationWizform(id: ID!): WizformSelectionModel
  addLocationWizformComment(id: ID!, comment: String!): String!
  removeLocationWizformComment(id: ID!): String!
  updateLocationWizformComment(id: ID!, comment: String!): String
}

type QueryRoot {
  userByEmail(email: String!): UserModel
  wizforms(
    """
    Book this wizform belongs to
    """
    bookId: ID!
    """
    Select all or only enabled wizforms
    """
    enabled: Boolean
    """
    Optional element of wizform
    """
    elementFilter: WizformElementType
    """
    Optional name filter
    """
    nameFilter: String
    """
    Optional active collection
    """
    collection: UUID
  ): [CollectionWizform!]!
  wizform(
    """
    Id of wizform to focus
    """
    id: ID!
    """
    Optional current collection
    """
    collectionId: ID
  ): CollectionWizform
  elements(
    """
    Book this element belongs to
    """
    bookId: ID!
    """
    Select all or only enabled elements
    """
    enabled: Boolean
  ): [ElementModel!]!
  books(
    """
    Query only available for user books
    """
    available: Boolean
  ): [BookModel!]!
  currentBook(id: ID!): BookFullModel
  processToken(token: String!): AuthorizationResult!
  signIn(email: String!, password: String!): SignInResult!
  sections(bookId: ID!): [LocationSectionWithCount!]!
  locations(sectionId: ID!): [LocationWithEntriesCountModel!]!
  locationEntries(locationId: ID!): [LocationWizformFullEntry!]!
  selectableWizforms(bookId: ID!, locationId: ID!): [WizformSelectionModel!]!
  wizformHabitats(wizformId: ID!): [LocationNameModel!]!
  collections(userId: ID!, bookId: ID!): [CollectionFullModel!]!
  activeCollection(bookId: ID!, userId: ID!): ID
  entriesCount(collectionId: ID!): Int!
}

type RegistrationResult {
  userId: ID!
  emailHash: String!
  passwordHash: String!
  token: String!
}

enum RegistrationState {
  UNREGISTERED
  UNCONFIRMED
  CONFIRMED
}

type SignInResult {
  newToken: String!
  emailHash: String!
  passwordHash: String!
  registrationState: RegistrationState!
  permission: UserPermissionType!
  userId: ID!
}

type TokenUpdateResult {
  userId: ID!
  newToken: String!
  registrationState: RegistrationState!
  permission: UserPermissionType!
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

type UpdateWizformResponse {
  message: String!
}

type UserModel {
  id: ID!
  name: String!
  email: String!
  salt: String!
  hashedPassword: String!
  registrationState: RegistrationState!
  permission: UserPermissionType!
}

enum UserPermissionType {
  UNREGISTERED_USER
  USER
  EDITOR
  ADMIN
}

enum WizformElementType {
  NONE
  NEUTRAL_ONE
  NATURE
  AIR
  WATER
  LIGHT
  ENERGY
  PSI
  STONE
  ICE
  FIRE
  DARK
  CHAOS
  METALL
  NEUTRAL_TWO
  CUSTOM_1
  CUSTOM_2
  CUSTOM_3
  CUSTOM_4
  CUSTOM_5
}

input WizformInputModel {
  id: ID!
  bookId: ID!
  gameId: String!
  element: WizformElementType!
  magics: MagicsInputModel!
  number: Int!
  hitpoints: Int!
  agility: Int!
  jumpAbility: Int!
  precision: Int!
  evolutionForm: Int!
  evolutionName: String
  previousForm: Int
  previousFormName: String
  evolutionLevel: Int!
  expModifier: Int!
  enabled: Boolean!
  description: String!
  icon64: String!
  name: String!
}

type WizformSelectionModel {
  id: ID!
  name: String!
  element: WizformElementType!
  number: Int!
}

input WizformUpdateModel {
  id: ID!
  enabled: Boolean
  element: WizformElementType
  name: String
  description: String
}

